objective: build a poker hand evaluator.
    interface: 
        input: 5 cards from a user.
        output: highest poker hand rank that can be obtained using the input cards.
            brute force flow:
                - generate all possible Poker hand ranks for the input cards.
                - find and return the highest-ranking Poker hand rank.
        

0. Plan: done
    - stories and preliminary subtasks: done
    - preliminary project structure: done
    - preliminary documentation: done

1. Learn Poker: done
    references:
        https://en.wikipedia.org/wiki/List_of_poker_hands
        ...

    - there exists 3 variations:
        - high games
        - low games
        - high-low split
            
    - poker hand:
        - properties:
            - 5 cards
            - rank: determined by the patterns formed by its cards.
                - ranks and their ordering: https://en.wikipedia.org/wiki/List_of_poker_hands
                - World Series of Poker hand rankings : https://www.wsop.com/poker-hands/ 
                - Poker hands: https://www.cardplayer.com/rules-of-poker/hand-rankings

                NB: We will use the rankings below, used by the World Series of Poker, World Poker Tour and many of the prestigious Poker tournaments.
                    This way, we are building a system that uses the same rules as the top tournaments.

                    The difference is that, they do not use wildcards to allow Five of Kind to be the highest hand rank.
                    Instead the Royal FLush is the highest hand rank.
                
                    We can later add a variant in the system that supports Wild Cards, but since this is non standard, it will not take priority.

                Highest Rank  = 1, Lowest Rank = 10
                -            rank_order        rank                        example
                -                1       Royal Flush 	        Ace of spades,    King of spades,    Queen of spades, Jack  of spades, 10 of spades
                -                2       Straight flush  	    Jack of clubs,    10 of clubs,       9 of clubs,      8 of clubs,      7 of clubs
                -                3       Four of a kind	        5 of clubs,       5 of diamonds,     5 of hearts,     5 of spades,     2 of diamonds
                -                4       Full house	            6 of spades,      6 of hearts,       6 of diamonds,   King of clubs,   King of hearts
                -                5       Flush	                Jack of diamonds, 9 of diamonds,     8 of diamonds,   4 of diamonds,   3 of diamonds
                -                6       Straight	            10 of diamonds,   9 of spades,       8 of hearts,     7 of diamonds,   6 of clubs
                -                7       Three of a kind         Queen of clubs,   Queen of spades,   Queen of hearts, 9 of hearts,     2 of spades
                -                8       Two pair	            Jack of hearts,   Jack of spades,    3 of clubs,      3 of spades,     2 of hearts
                -                9       One pair	            10 of spades,     10 of hearts,      8 of spades,     7 of hearts,     4 of clubs
                -               10      High card	            King of diamonds, Queen of diamonds, 7 of spades,     4 of spades,     3 of hearts
        
                - rank algorithm: describes how the patterns of the cards, are used to calculate the rank.
                    TODO: This should be a solved problem, find a library/REST API that does this.
                        problem:
                            given: 
                                hand = 5 cards
                            objective: generate all possible Poker hand ranks for the 5 cards.

                            example:
                                given:
                                    hand = 6C, 7C, 8C, 9C 10C
                                            C = Clubs
                                return:
                                    [ High Card, Straight, Straight Flush ]
                
    - cards:
        list_of_cards: A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2
        list_of_suits: Spades, Hearts, Diamonds, Clubs.
        jokers: optional
            total number of cards = (list_of_cards × list_of_suits) + jokers
                                (13 × 4) + jokers = 52 + jokers
                NB: Each card exists in each suit.
        rank:
            Highest Rank  = 1, Lowest Rank = 13
            rank        value
            1            A,
            2            K, 
            3            Q,
            4            J, 
            5            10, 
            6            9, 
            7            8, 
            8            7, 
            9            6, 
            10           5, 
            11           4, 
            12           3, 
            13           2
            TODO: Q: What is the rank of the Joker cards?
            NB: suits are NOT ranked.

    - showdown: determines who wins the pot[purely for gaining a big picture to design for, we will not be implementing this]:
        - rules:
            - a hand in a higher-ranking rank always ranks higher than a hand in a lower-ranking rank:
                i.e. if hand_a.rank < hand_b.rank: hand_a ranks higher than hand_b
                TODO: NB: be careful here, because rank 1 is higher than rank 10.
                NB: since suits are NOT ranked.
                    hands that differ only by suit have EQUAL rank.
            - within the same rank, a hand is ranked using its card's ranks.

2. Model Poker domain: done

3. Implement a REST API application scaffolding and endpoint: done 
    endpoint:
        path: /hand/highest-rank
        method: POST
        valid values:    
            value: { A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
            suit: { C, D, H, S }
                  # C = Clubs, D = Diamonds, H = Hearts, S = Spades

        data interface: JSON
            example:
                [
                    {
                        value: 2
                        suit: C
                    },
                    {
                        value: A
                        suit: S
                    },
                    {
                        value: 5
                        suit: D
                    },
                    {
                        value: 4
                        suit: H
                    },
                    {
                        value: J
                        suit: C
                    },

                ]

4. define the "/hand/highest-rank" endpoint: done
    - define flow
    - define validations
        - 5 cards requirement for this variation of Poker we are implementing.
    NB: No need to implement completely, it's simply to give us the big picture of how everything will fit 
        together.
        In an MVP/POC project, we would have a working piece of software with the Pocker domain modeled to showcase to stakeholder/client.

5. Research, evaluate, and decide on library/API that can generate all possible Poker hand ranks for input cards: done
    criteria:
        1. does it work?
        2. is it well-tested?
        3. is it well maintained?
        4. is easy to use?
        5. can it solve Poker variations that use different hand card numbers(e.g. 7 cards)
            NB: consider this, to make the app extensible as a Domain/Context for solving Poker problems within our ecosystem.
            NB: Thinking Point: You might need to have some Poker rule-set strategy that is applied
                                    based on the Poker variation being played.

        1. PokerKit: A Comprehensive Python Library for Fine-Grained Multi-Variant Poker Game Simulations 
            https://arxiv.org/abs/2308.07327v4
            https://github.com/uoftcprg/pokerkit
            1. does it work?: for its intended purpose of simulating poker games and evaluating hands to create the strongest hand possible from
                hole cards and boards cards.
            2. is it well-tested?: Yes
            3. is it well maintained?: Yes
            4. is easy to use?: Yes
            conclusion: unfortunately it does not solve the problem of generating the highest Poker hand rank from an arbitrary list of cards.
    
        2. PokerLib https://pypi.org/project/pokerlib/
            1. does it work?: for its intended purpose of simulating Texas Hold'Em games and evaluating hands to create the strongest hand possible from
                hole cards and boards cards.
            2. is it well-tested?: Yes
            3. is it well maintained?: Yes
            4. is easy to use?: Yes
        conclusion: unfortunately it does not solve the problem of generating the highest Poker hand rank from an arbitrary list of cards.

        3. PH Evaluator: https://github.com/HenryRLee/PokerHandEvaluator
            1. does it work?: for its intended purpose of determining the strength of a hand from precomputed hand strengths.
            2. is it well-tested?: There are some tests, but more could be added.
            3. is it well maintained?: Yes
            4. is easy to use?: Yes
        conclusion: unfortunately it does not solve the problem of generating the highest Poker hand rank from an arbitrary list of cards.
        4. Cactus Kev's Poker Hand Evaluator: http://suffe.cool/poker/evaluator.html            
            1. does it work?: for its intended purpose of determining the strength of a hand from precomputed hand strengths.
            2. is it well-tested?: No unit tests or automated testing
            3. is it well maintained?: Difficult to day,as  code is hosted on a File server instead of a Version Control system.
            4. is easy to use?: Yes
        conclusion: unfortunately it does not solve the problem of generating the highest Poker hand rank from an arbitrary list of cards.

    overall conclusion: unfortunately the tools out there and those explored here are Poker game simulators or Poker hand strength calculators.
                        they do not provide you the hand rank, they generate th score to use in determining a winner.
                        NB: its very likely one exists that solves our problem, but I did not find it.

                        if one were to extend app_poker to simulate Pocker or run live Poker games. PokerKit from University of Toronto Computer Poker Research Group
                            would be the best choice.
                        
                        for the task at hand, I will write our own implementation.
                            the flow will be:
                            calculate_highest_hand_rank:
                                if is_5_of_a_kind(hand.cards): return FIVE_OF_A_KIND
                                elif is_a_straight_flush(hand.cards): return STRAIGHT_FLUSH
                                elif is_4_of_a_kind(hand.cards): return FOUR_OF_A_KIND
                                elif is_a_full_house(hand.cards): return FULL_HOUSE
                                elif is_a_flush(hand.cards): return FLUSH
                                elif is_a_straight(hand.cards): return STRAIGHT
                                elif is_3_of_a_kind(hand.cards): return THREE_OF_A_KIND
                                elif is_a_2_pair(hand.cards): return TWO_PAIR
                                elif is_a_1_pair(hand.cards): return ONE_PAIR
                                else: return High Card HIGH_CARD: return

                                NB: each of these functions will house logic to detect the pattern that constitutes the particular rank.
                    
6. Design internal calculator interface that will implement: done
        - calculate_highest_hand_rank(hand)
        - calculate_hand_ranks(hand)

7. Define scenarios for calculate_highest_hand_rank algorithm: done

8. Implement tests to represent scenarios for calculate_highest_hand_rank: WIP 
    Feel free to add scaffolding the tests require (Interface, method/function declaration etc)
    NB: No implementation yet though.

9. Implement calculate_highest_hand_rank algorithm

10. Define scenarios for /evaluate endpoint

11. Implement tests for /evaluate endpoint

12. Implement the full flow for /evaluate endpoint

13. Complete README documentation
    - instructions to build/run
    - utility scripts

14. add end to end test for /evaluate endpoint
    consider this: https://werkzeug.palletsprojects.com/en/2.0.x/test/ instead of JavaScript running in Node.
...

Key:
   * first pass done
   ** second pass
   ... more might follow [We use an iterative approach, more will definitely follow]